plugins {
	id 'checkstyle'
	id 'eclipse'
	id 'java-gradle-plugin'
	id 'maven-publish'

	alias(libs.plugins.asciidoctor)
	alias(libs.plugins.javaformat)
	alias(libs.plugins.nohttp)
}

group = 'io.spring.gradle'
description = 'Dependency Management Plugin'

repositories {
	mavenCentral()
	maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

gradlePlugin {
	plugins {
		dependencyManagement {
			displayName = 'Dependency management plugin'
			description = 'A Gradle plugin that provides Maven-like dependency management functionality'
			id = 'io.spring.dependency-management'
			implementationClass = 'io.spring.gradle.dependencymanagement.DependencyManagementPlugin'
		}
	}
}

checkstyle {
	configFile = layout.projectDirectory.file("config/checkstyle/checkstyle.xml").asFile
	configProperties = [ 'checkstyle.config.dir' : rootProject.file('config/checkstyle') ]
}

configurations {
	asciidoctorExt
	jarjar
	maven
}

def mavenRepackJar = tasks.register("mavenRepackJar", Jar) { repackJar ->
	repackJar.archiveBaseName = "maven-repack"
	repackJar.archiveVersion = libs.versions.maven.get()

	doLast() {
		project.ant {
			taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.jarjar.asPath
			jarjar(destfile: repackJar.archivePath) {
				configurations.maven.each { originalJar ->
					zipfileset(src: originalJar)
				}
				rule(pattern: 'org.**', result: 'io.spring.gradle.dependencymanagement.org.@1')
			}
		}
	}
}

dependencies {
	asciidoctorExt libs.spring.asciidoctor.backends

	checkstyle libs.spring.javaformat.checkstyle

	implementation(files(mavenRepackJar))

	jarjar libs.jarjar

	maven libs.maven.model.builder

	testImplementation libs.cglib.nodep
	testImplementation libs.assertj.core
	testImplementation libs.mockito.core
	testImplementation libs.junit.jupiter
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}
	withJavadocJar()
	withSourcesJar()
}

tasks.named("test").configure {
	useJUnitPlatform()
}

tasks.named("jar").configure {
	from(zipTree(mavenRepackJar.map { it.archivePath })) {
		include 'io/spring/gradle/**'
		include 'META-INF/plexus/**'
	}

	manifest {
		attributes(
			'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
			'Implementation-Title': project.description,
			'Implementation-Version': project.version,
			'Implementation-Vendor': 'Pivotal Software, Inc.'
		)
	}
}

tasks.named("javadoc").configure {
	title = "$project.description $project.version API"
	exclude 'io/spring/gradle/dependencymanagement/internal/**'
	options {
		links "https://docs.gradle.org/${project.gradle.gradleVersion}/javadoc/",
			  'https://docs.oracle.com/javase/8/docs/api/'
	}
}

asciidoctorj {
	fatalWarnings ".*"
}

tasks.named("asciidoctor").configure {
	baseDirFollowsSourceDir()
	configurations 'asciidoctorExt'
	outputOptions {
		backends "spring-html"
	}
}

tasks.register("docsZip", Zip) {
	group = 'Distribution'
	archiveBaseName = 'dependency-management-plugin'
	archiveClassifier = 'docs'
	description = "Builds docs archive containing API and reference documentation"
	destinationDirectory = layout.buildDirectory.dir("distributions")

	from(tasks.named("asciidoctor")) {
		into 'reference/html'
	}
	from(tasks.named("javadoc")) {
		into 'api'
	}
}

publishing {
	publications.configureEach {
		pom {
			name = 'Dependency management plugin'
			description = 'A Gradle plugin that provides Maven-like dependency management functionality'
			url = 'https://github.com/spring-gradle-plugins/dependency-management-plugin'
			organization {
				name = 'VMware, Inc.'
				url = 'https://spring.io'
			}
			licenses {
				license {
					name = 'The Apache Software License, Version 2.0'
					url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
				}
			}
			scm {
				url = 'https://github.com/spring-gradle-plugins/dependency-management-plugin'
				connection = 'scm:git:https://github.com/spring-gradle-plugins/dependency-management-plugin'
			}
			developers {
				developer {
					id = 'wilkinsona'
					name = 'Andy Wilkinson'
					email = 'wilkinsona@vmware.com'
					roles = ["Project lead"]
				}
			}
		}
		if (name == "pluginMaven") {
			artifact tasks.named("docsZip")
		}

	}
	if (project.hasProperty("deploymentRepository")) {
		repositories.maven {
			url = "$deploymentRepository"
			name = "deployment"
		}
	}
}

